# A brainfuck interpreter written in NN++.

##########################################
# Start Section
##########################################
GOTO
readloop
##########################################
# Trap Section
##########################################

##########################################
# testsign subroutine
##########################################
#args
#testsign_neg
#testsign_pos
#testsign_zero
#testsign_input

0 $testsign
COPY
0 $testsign_zero
trap

DECR
0 $testsign_input

COPY
testsign_input
testsign_local1

0 $testsign_loop

COPY
0 $testsign_neg
trap
DECR
0 $testsign_local1

COPY
testsign_local1
testsign_local2

COPY
0 $testsign_pos
trap
DECR
0 $testsign_local2

COPY
testsign_local2
testsign_local1

GOTO
testsign_loop

GOTO $98
0 $trap

##########################################
# Program input section
##########################################
READ $readloop
0 $inp

copy
endread
trap

COPY
inp
nulltest

{ #debug
#	COPY
#	inp
#	deb_inpt
#
#	WRITD
#	0 $deb_inpt
}

DECR
0 $nulltest

# ASCII Table
# + 2B
# , 2C
# - 2D
# . 2E
# < 3C
# > 3E
# [ 5B
# ] 5D

###
# Drop Call
###
table $table_start
43 $table  # +  = 1
0          # ,  = 2
0          # -  = 3
0          # .  = 4
13         # <  = 5
1          # >  = 6
28         # [  = 7
1          # ]  = 8

COPY
inp
dropval

COPY
table_start
dropaddr

{
	##########################################
	# DROP subroutine
	##########################################
	# DROP is a hairy beast.
	# Basically, this maps buckets of numbers to
	# single numbers.
	# dropaddr points to the zeroth bucket,
	#	loop:
	#		dropval -= dropaddr[i] + 1
	#	return i+1
	# dropretval is used as the return register.
	#
	# Note that the logic of loop above implies
	# that you want each element of dropaddr
	# to be one smaller than the bucket it accepts
	#
	# given dropaddr = [4,3,3,2]
	# 0 - 4 => 1
	# 5 - 8 => 2
	# 9 - 11 => 3
	# 12 - 14 => 4
	# 15 and up => Depends what's floating around memory!

	#setup
	{
		0 $dropaddr
	}


	DROP $DROP

	#args
	# $dropretaddr (THE RETURN ADDRESS)
	# $dropval     (THE INPUT/OUTPUT NUMBER)
	# $droplen     (THE LENGTH OF THE INPUT TABLE)
	# $dropaddr    (THE ADDRESS OF THE INPUT TABLE)

	COPY
	ZERO
	dropretval

	COPY
	six
	ctrl_decr

	COPY
	zero
	isctrlflag

	GOTO
	firstdroploop

	droploop $droploop

	#increment address
	COPY
	dropaddr
	da_incr
	INCR
	0 $da_incr
	COPY
	da_incr
	dropaddr

	0 $firstdroploop
	#update result value
	{
		INCR
		0 $dropretval


		{ #Control flow traps
			COPY
			setup_ctrl
			trap


			#Todo: do something better to prevent
			#ctrl_decr from firing twice
			#todo wasteful
			DECR
			0 $ctrl_decr

			GOTO
			post_urv
		}

		{
			100 $hundred
			setup_ctrl $setup_ctrl
			#Get the drop value and allocate space for
			#end address. If we're end, actually generate
			#the end address

			COPY
			hundred
			ctrl_decr

			COPY
			one
			isctrlflag

		}


		post_urv $post_urv

	}

	#Compute the table element.
	#We'll decrement the value this number of times.
	COPY
	dropaddr
	dropaddr_indirect
	COPY
	0 $dropaddr_indirect
	drop_table_elem

	#output table element for debugging

	{ #drop inner loop
		0 $drop_inner_loop

		#subtract one from the total value.
		#On failure, we're done!
		COPY
		dropfail
		trap
		DECR
		0 $dropval

		#subtract one from the loop variable
		#On failure, repeat the drop loop!
		COPY
		droploop
		trap
		DECR
		0 $drop_table_elem

		GOTO
		drop_inner_loop
	}
}

dropfail $dropfail

#Copy the value into our instruction list.
COPY
iptr
iptr_indirect
COPY
dropretval
0 $iptr_indirect

{ #Make space for startloop/endloop
	COPY
	end_ctrl_check
	trap

	DECR
	0 $isctrlflag

	{
		COPY
		iptr
		iptr_incr10

		INCR
		0 $iptr_incr10

		COPY
		iptr_incr10
		iptr

		COPY
		iptr
		iptr_deref44

		COPY
		invalid_address
		0 $iptr_deref44
	}

	COPY
	instr_count
	instr_count_update
	INCR
	0 $instr_count_update
	COPY
	instr_count_update
	instr_count

	end_ctrl_check $end_ctrl_check
}

postdropfail $postdropfail


###
# end of loop bookkeeping
###
COPY
iptr
eol_incr1

{ # Debug code!
#	COPY
#	iptr
#	debug_itr
#
#	COPY
#	0 $debug_itr
#	debug_result
#
#	COPY
#	iptr
#	debug_ptr
#
#	WRITD
#	0 $debug_ptr
#	WRITD
#	0 $debug_result
}

INCR
0 $eol_incr1

COPY
eol_incr1
iptr

INCR
0 $instr_count

GOTO
readloop
endread $endread

##########################################
# End-of-read nonsense
##########################################

COPY
iptr
iptr_indr

COPY
ZERO
0 $iptr_indr

COPY
iptr
eor_incr1

INCR
0 $eor_incr1

COPY
eor_incr1
iptr

##########################################
# Interpreter setup
##########################################
{
	#constant!
	instr_start $instr_start_address

	COPY
	iptr
	dataptr

	COPY
	instr_start_address
	iptr
	
}

#GOTO
#clean_startloops_done
{
	#Change [ to instruction pointer
	#address of where they should jump to.

	#Iterate through instructions, testing each for inclusion

	COPY
	clean_startloops_done
	trap

	COPY
	instr_start_address
	iptr_increr

	#TODO: is this right or am I still off by one?
	COPY
	instr_count
	instr_count_decr

	clean_startloops_loop $clean_startloops_loop

	COPY
	clean_startloops_done
	trap

	DECR
	0 $instr_count_decr

	COPY
	iptr_increr
	item_address

	INCR
	0 $iptr_increr

	{ #Setup call to testctrl to see if we're a [
		COPY
		setup_startloop
		testctrl_start

		COPY
		clean_startloops_loop
		testctrl_end
	
		COPY
		clean_startloops_loop
		testctrl_nonctrl
	}

	GOTO
	testctrl

	{ #setup_startloop subroutine
		setup_startloop $setup_startloop

		{ #Setup

			COPY
			iptr_incr
			iptr_fun

			#COPY
			#iptr
			#iptr_bkup

			COPY
			zero
			loopcount

			{ #Todo off by one?
				COPY
				item_address
				iptr_preincr

				INCR
				0 $iptr_preincr

				COPY
				iptr_preincr
				iptr
			}

			{ #testctrl setup for jumpfwd!
				COPY
				jumpfwd_isstart
				testctrl_start
			
				COPY
				jumpfwd_isend
				testctrl_end
			}

			COPY
			sstart_finish
			jumpfwd_ret
		}

		COPY
		iptr
		iptr_old_val

		GOTO
		jumpfwd
		sstart_finish $sstart_finish

		{ #Update invalid addresses

			0 $loop_endpoint
			0 $iptr_old_val

			#Save the final address
			COPY
			iptr
			loop_endpoint

			#Restore the old value
			COPY
			iptr_old_val
			iptr

			#Store the end loop index after
			#the start loop
			{
				COPY
				iptr
				iptr_deref92
				COPY
				loop_endpoint
				0 $iptr_deref92
			}

			#Store the start loop index
			#after the end loop
			{
				COPY
				loop_endpoint
				post_loop_endpoint
				INCR
				0 $post_loop_endpoint
				COPY
				post_loop_endpoint
				post_loop_endpoint_deref
				COPY
				iptr
				0 $post_loop_endpoint_deref
			}
		}

		GOTO
		clean_startloops_loop
	}

	clean_startloops_done $clean_startloops_done
}

##########################################
# Interpreter reset
##########################################
{
	COPY
	instr_start_address
	iptr
}

GOTO
instr


##########################################
# Interpreter section
##########################################

#Iterate over possible instructions

0 $instr


{ #Call to testitem which implements the tokenizer
	#EOF = 0 (end)
	# +  = 1 (bf_incr)
	# ,  = 2 (bf_input)
	# -  = 3 (bf_decr)
	# .  = 4 (bf_output)
	# <  = 5 (bf_move_left)
	# >  = 6 (bf_move_right)
	# [  = 7 (bf_loop_left)
	# ]  = 8 (bf_loop_right)

	#Note: these copies need to be executed
	#each iteration because testctrl can overwrite them
	#TODO: try to only run these if dirtied OR inline
	#interpreter code.
	COPY
	endinterpret
	eof

	COPY
	bf_incr
	plus

	COPY
	bf_input
	comma

	COPY
	bf_decr
	minus

	COPY
	bf_output
	dot

	COPY
	bf_move_left
	move_left

	COPY
	bf_move_right
	move_right

	COPY
	bf_loop_start
	loop_start

	COPY
	bf_loop_end
	loop_end

	COPY
	post_nonloop_instr
	testitem_addr

	0 $interpreterloop

	COPY
	iptr
	item_address

	GOTO
	testitem
}

post_nonloop_instr $post_nonloop_instr

COPY
iptr
incrme

INCR
0 $incrme

COPY
incrme
iptr

GOTO
interpreterloop

##########################################
# Brainfuck Subroutines
##########################################

#EOF = 0 (end)
# +  = 1 (bf_incr)
# ,  = 2 (bf_input)
# -  = 3 (bf_decr)
# .  = 4 (bf_output)
# <  = 5 (bf_move_left)
# >  = 6 (bf_move_right)
# [  = 7 (bf_loop_left)
# ]  = 8 (bf_loop_right)


endinterpret $endinterpret
GOTO
finale

#######
# SETDATA
# *data = *dataptr
# *dataptr_ptr = dataptr
#######
0 $data
setdata $setdata
COPY
dataptr
dataptr_ptr
COPY
0 $dataptr_ptr
data
GOTO
0 $postsetdata


#######
# BF_INCR
#######
bf_incr $bf_incr

#WRITD
#1111

#Set jump point and call setdata
COPY
bf_incr_rest
postsetdata
GOTO
setdata

#return from setdata
bf_incr_rest $bf_incr_rest

{ #testsign call

	COPY
	data
	testsign_input
	COPY 
	pos_path
	testsign_pos
	COPY #Treat zero as positive
	pos_path 
	testsign_zero
	COPY
	neg_path_careful
	testsign_neg

	GOTO
	testsign
}

pos_path $pos_path
#WRITD
#11112

COPY
data
bfincr_1
INCR
0 $bfincr_1
COPY
bfincr_1
bfincr_2
INCR
0 $bfincr_2
COPY
bfincr_2
data

{ #**dataptr = *data
	COPY
	dataptr
	dataptr_bfincr_deref

	COPY
	data
	0 $dataptr_bfincr_deref
}

GOTO
post_nonloop_instr

neg_path_careful $neg_path_careful
#WRITD
#11113

#Decr once if we're one, twice otherwise
COPY 
after_decrs
trap

COPY
data
bfdecr_1
DECR
0 $bfdecr_1

COPY
bfdecr_1
data
COPY
bfdecr_1
bfdecr_2

DECR
0 $bfdecr_2
COPY
bfdecr_2
data

after_decrs $after_decrs
{ #**dataptr = *data
	COPY
	dataptr
	dataptr_bfincr_deref2

	COPY
	data
	0 $dataptr_bfincr_deref2
}

GOTO
post_nonloop_instr

#######
# BF_DECR
#######

bf_decr $bf_decr

#WRITD
#3333

COPY
bf_decr_rest
postsetdata
GOTO
setdata
bf_decr_rest $bf_decr_rest

COPY
data
testsign_input
COPY 
neg_path_careful
testsign_pos
COPY 
decr_zero
testsign_zero
COPY
pos_path
testsign_neg

GOTO
testsign

decr_zero $decr_zero
#If we decrement zero, we switch to negative (= odd numbers)
#it will always be 1!

{ #**dataptr = 1
	COPY
	dataptr
	dataptr_bfincr_deref3

	COPY
	ONE
	0 $dataptr_bfincr_deref3
}

COPY
ONE
dataptr_ptr
GOTO
post_nonloop_instr


#######
# bf_move_right
#######
bf_move_right $bf_move_right

#WRITD
#6666

COPY
dataptr
dataptr_mr_local1
INCR
0 $dataptr_mr_local1

COPY
dataptr_mr_local1
dataptr_mr_local2
INCR
0 $dataptr_mr_local2

COPY
dataptr_mr_local2
dataptr
GOTO
post_nonloop_instr


#######
# bf_move_left
#######
bf_move_left $bf_move_left

#WRITD
#5555

COPY
dataptr
dataptr_ml_local1
DECR
0 $dataptr_ml_local1

COPY
dataptr_ml_local1
dataptr_ml_local2
DECR
0 $dataptr_ml_local2

COPY
dataptr_ml_local2
dataptr
GOTO
post_nonloop_instr


#######
# bf_loop_start
#######
{
	bf_loop_start $bf_loop_start
	#WRITD
	#7777

	{ #Setup

		COPY
		post_nonloop_instr
		runtime_jump_ret
	}

	COPY
	bf_loopstart_rest
	postsetdata
	GOTO
	setdata
	bf_loopstart_rest $bf_loopstart_rest

	{ #testsign call
	#If nonpositive, runtime jumpfwd
	#Otherwise no-op!

		COPY
		data
		testsign_input
		COPY 
		post_nonloop_instr
		testsign_pos
		COPY
		runtime_jump 
		testsign_zero
		COPY
		runtime_jump
		testsign_neg

		GOTO
		testsign
	}

	#no path through here, crash!
	WRITD
	9996

}


{ #increment instruction pointer
	iptr_incr $iptr_incr

	COPY
	iptr
	iptr_incr_jumpfwd

	INCR
	0 $iptr_incr_jumpfwd

	COPY
	iptr_incr_jumpfwd
	iptr

	GOTO
	iptr_fun_ret
}

{ #decrement instruction pointer
	iptr_decr $iptr_decr

	COPY
	iptr
	iptr_decr_jumpfwd

	DECR
	0 $iptr_decr_jumpfwd

	COPY
	iptr_decr_jumpfwd
	iptr


	GOTO
	iptr_fun_ret
}
#######
# runtime_jump
#######
{

	runtime_jump $runtime_jump

	COPY
	iptr
	iptr_rt_incr

	INCR
	0 $iptr_rt_incr

	COPY
	iptr_rt_incr
	iptr

	#WRITD
	#8080

	COPY
	iptr
	iptr_deref_runtime_jump

	COPY
	0 $iptr_deref_runtime_jump
	iptr

	{ #debug
#		COPY
#		iptr
#		iptr_output_debug
#
#		WRITD
#		0 $iptr_output_debug
	}

	GOTO
	0 $runtime_jump_ret
}

#######
# bf_loop_end
#######
{
	bf_loop_end $bf_loop_end

#	WRITD
#	8888

	{ #Setup

		COPY
		post_nonloop_instr
		runtime_jump_ret
	}

	COPY
	bf_loopend_rest
	postsetdata
	GOTO
	setdata
	bf_loopend_rest $bf_loopend_rest

	{ #testsign call
		#If positive, jumpfwd... backward!
		#Otherwise no-op!

		COPY
		data
		testsign_input
		COPY
		runtime_jump 
		testsign_pos
		COPY
		post_nonloop_instr
		testsign_zero
		COPY
		post_nonloop_instr
		testsign_neg

		GOTO
		testsign
	}
}

#######
# bf_input
#######
bf_input $bf_input

READ
0 $bf_inp_slot

{	#reinterlace data
	#multiply input by 2!
	#Soo, decr the original value
	#		add two to new value

	0 $bf_inp_result



	{ #reinterlace setup
		COPY
		zero
		bf_inp_result

		COPY
		bf_inp_slot
		decr_orig

		COPY
		reinterlace_done
		trap

		COPY
		zero
		new_incr1
	}

	{ #reinterlace loop
		0 $reinterlace_me

		DECR
		0 $decr_orig

		INCR
		0 $new_incr1

		COPY
		new_incr1
		new_incr2

		INCR
		0 $new_incr2

		COPY
		new_incr2
		bf_inp_result

		COPY
		new_incr2
		new_incr1

		GOTO
		reinterlace_me
	}

	reinterlace_done $reinterlace_done

}

COPY
dataptr
data_deref_spot

COPY
bf_inp_result
0 $data_deref_spot

{ #debug
#	COPY
#	dataptr
#	mmmm

#	COPY
#	0 $mmmm
#	input_deb

#	WRITD
#	0 $input_deb
}

GOTO
post_nonloop_instr

#######
# bf_output
#######
bf_output $bf_output

#WRITD
#4444

COPY
deinterlace_data
postsetdata

COPY
bf_outp_rest
post_deinterlace

GOTO
setdata
bf_outp_rest $bf_outp_rest

WRIT
0 $deinterlace_output

GOTO
post_nonloop_instr


##########################################
# Deinterlace subroutine
##########################################
deinterlace_data $deinterlace_data

#0 => 0
#1,2 => 1
#3,4 => 2
#divide data by two, rounding up

{ #Function Setup
	COPY
	zero
	deinterlace_output

	COPY
	post_deinterlace
	trap
}

{ #pre-loop decrement (if it fails, result is zero)
	COPY
	data
	deinter_decr1
	
	DECR
	0 $deinter_decr1
}


{ #deinterlace loop
	deinterlace_loop_start $deinterlace_loop_start

	{ #Increment output
		COPY
		deinterlace_output
		output_incr

		INCR
		0 $output_incr

		COPY
		output_incr
		deinterlace_output
	}

	{ #deinter_decr1 -= 2
		COPY
		deinter_decr1
		deinter_decr2
		DECR
		0 $deinter_decr2
		COPY
		deinter_decr2
		deinter_decr3
		DECR
		0 $deinter_decr3

		COPY
		deinter_decr3
		deinter_decr1
	}

	#Start loop over
	GOTO
	deinterlace_loop_start
}


GOTO
post_deinterlace $post_deinterlace

########
# TESTCTRL
########
{
	testctrl $testctrl

	#Addresses of parameters
	0 $testctrl_start
	0 $testctrl_end
	0 $testctrl_nonctrl

	{ #set up call to testitem
		COPY
		testctrl_nonctrl
		eof
		COPY
		testctrl_nonctrl
		plus
		COPY
		testctrl_nonctrl
		comma
		COPY
		testctrl_nonctrl
		minus
		COPY
		testctrl_nonctrl
		dot
		COPY
		testctrl_nonctrl
		move_left
		COPY
		testctrl_nonctrl
		move_right
		COPY
		testctrl_nonctrl
		testitem_addr

		COPY
		testctrl_start
		loop_start

		COPY
		testctrl_end
		loop_end

		GOTO
		testitem
	}

	#Should never get here.
	WRITD
	9998
}


#####
# jumpfwd
#####
{ #Search for ] and go there!
	jumpfwd $jumpfwd

	#scan forward in instruction pointer, incrementing for start loop
	#and decrementing for end loop. Trap on loopcount < 0

	GOTO
	0 $iptr_fun
	0 $iptr_fun_ret

	{ #testctrl call
		#Some setup happens at the top!

		COPY
		iptr
		item_address

		COPY
		jumpfwd_ignore
		testctrl_nonctrl

		GOTO
		testctrl
	}

	{ #Just increment and ignore this instruction!
		jumpfwd_ignore $jumpfwd_ignore



		GOTO
		jumpfwd
	}

	{
		jumpfwd_isstart $jumpfwd_isstart

		COPY
		loopcount
		loopcount_incr1
		INCR
		0 $loopcount_incr1
		COPY
		loopcount_incr1
		loopcount

		GOTO
		jumpfwd
	}

	{
		jumpfwd_isend $jumpfwd_isend

		COPY
		loopcount
		jumpfwd_local_decr
		COPY
		jumpfwd_over
		trap

		DECR
		0 $jumpfwd_local_decr

		COPY
		jumpfwd_local_decr
		loopcount

		GOTO
		jumpfwd
	}

	jumpfwd_over $jumpfwd_over


	#TODO: if no special work is needed on
	#jumpfwd_over, remove label and replace
	#with post_nonloop_instr

	#TODO: I may be able to save several
	#copies per interpret for non control
	#ops by resetting jumpfwds here!
	GOTO
	0 $jumpfwd_ret
}

#######
# TESTITEM
#######
{ #Test which brainfuck symbol (or eof) is at the instruction pointer!

	0 $eof
	0 $plus
	0 $comma
	0 $minus
	0 $dot
	0 $move_left
	0 $move_right
	0 $loop_start
	0 $loop_end
	#item_address

	testitem $testitem

	#EOF = 0 (end)
	# +  = 1 (bf_incr)
	# ,  = 2 (bf_input)
	# -  = 3 (bf_decr)
	# .  = 4 (bf_output)
	# <  = 5 (bf_move_left)
	# >  = 6 (bf_move_right)
	# [  = 7 (bf_loop_left)
	# ]  = 8 (bf_loop_right)

	#copy current instruction to chkend
	COPY
	0 $item_address
	chkend

	{ #debug

#		COPY
#		item_address
#		print_addr
#
#		WRITD
#		0 $print_addr
#
#		COPY
#		chkend
#		debug_instr_strt
#		WRITD
#		0 $debug_instr_strt

	}

	#Check for 0
	#(= end of instructions!)
	COPY
	eof
	trap
	DECR
	0 $chkend

	COPY
	plus
	trap
	COPY
	chkend
	chkincr
	DECR
	0 $chkincr

	COPY 
	comma
	trap
	COPY
	chkincr
	chkinpt
	DECR
	0 $chkinpt

	COPY 
	minus
	trap
	COPY
	chkinpt
	chkdecr
	DECR
	0 $chkdecr

	COPY 
	dot
	trap
	COPY
	chkdecr
	chkout
	DECR
	0 $chkout

	COPY 
	move_left
	trap
	COPY
	chkout
	chklmove
	DECR
	0 $chklmove

	COPY 
	move_right
	trap
	COPY
	chklmove
	chkrmove
	DECR
	0 $chkrmove

	COPY 
	loop_start
	trap
	COPY
	chkrmove
	chklloop
	DECR
	0 $chklloop

	COPY 
	loop_end
	trap
	COPY
	chklloop
	chkrloop
	DECR
	0 $chkrloop

	#WRITD
	#9999

	GOTO
	0 $testitem_addr

	#TODO: should never reach here.
	#Crash?
}

finale $finale
##########################################
# Global Data
##########################################


###
# Constants
###
0 $zero
1 $one
6 $six
7 $seven
7 $startloop
8 $endloop
111 $invalid_address

###
# Global scalars
###
0 $dataptr
instr_start $iptr
0 $loopcount #natural number

###
# Global vectors
###
# vector format:
# We store 2 different vectors
# Treating 9100 as address 0:
#  addr % 2 == 0 -> nonnegative data address (integer)
#  addr % 2 == 1 -> instructions (ascii code)


0 $preinstr
0 $instr_start



