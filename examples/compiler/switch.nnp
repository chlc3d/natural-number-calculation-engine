### EXPECTED_DEFS
### $trap
### $math_zero







	##########################################
	# SWITCH subroutine
	##########################################
	# The switch function is used to determine
	# which "bucket" the switch value flls into.
	# switch(buckets, x) =
	#	the smallest value of n >= 1 such that
	#	the sum of buckets 1 to n > x
	#				
	# given buckets = [4,3,3,2]
	# x = 0  to 3  => 1
	# x = 4  to 6  => 2
	# x = 7  to 9  => 3
	# x = 10 to 11 => 4
	# x > 11 => undefined
	# switch_ret = Value defined above
	# switch_leftover = how many items we counted after landing 
	# in last bucket


	#args
	# $switch_ret_addr 	#(The return address)
	# $switch_ret_val   #(The return value)
	# $switch_val		#(The Value to switch on)
	0 $switch_len     	#(The length of the input table. Currently ignored.)
	# switch_table_addr    	#(the address of the input table)


	^switch $switch


	#Reset switch_ret_valval
	COPY
	^math_zero
	^switch_ret_val

	GOTO
	^firstswitchloop

	^switchloop $switchloop

	#increment address
	INCR
	0 $switch_table_addr

	0 $firstswitchloop
	#update result value
	{
		INCR
		0 $switch_ret_val

		COPY
		^math_zero
		^switch_leftovers


		#Compute the table element.
		#We'll decrement the value this number of times.
		COPY
		^switch_table_addr
		^switch_table_addr_indirect
		COPY
		0 $switch_table_addr_indirect
		^switch_table_elem

		#output table element for debugging

		{ #switch inner loop
			0 $switch_inner_loop

			#subtract one from the loop variable
			#On failure, repeat the switch loop!
			COPY
			^switchloop
			^trap
			DECR
			0 $switch_table_elem

			#subtract one from the total value.
			#On failure, we're done!
			COPY
			^switch_fail
			^trap
			DECR
			0 $switch_val
			INCR
			0 $switch_leftovers


			GOTO
			^switch_inner_loop
		}
	}

	^switch_fail $switch_fail
	#Done?
	GOTO
	0 $switch_ret_addr