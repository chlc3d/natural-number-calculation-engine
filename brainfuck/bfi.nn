
##########################################
# Start Section
##########################################
GOTO
readloop
##########################################
# Trap Section
##########################################

98: GOTO
trap: 0


##########################################
# Program input section
##########################################
readloop: INPT
inp: 0

copy
endread
trap

COPY
inp
nulltest

DECR
nulltest: 0

# ASCII Table
# + 2B
# , 2C
# - 2D
# . 2E
# < 3C
# > 3E
# [ 5B
# ] 5D

###
# Drop Call
###
table_start: table
table: 43 # +  = 1
0  # ,  = 2
0  # -  = 3
0  # .  = 4
13 # <  = 5
1  # >  = 6
28 # [  = 7
1  # ]  = 8

COPY
inp
dropval

COPY
table_start
dropaddr

COPY
afterdrop
dropretaddr

GOTO
DROP
afterdrop: afterdrop

#Copy the value into our instruction list.
COPY
iptr
iptr_indirect
COPY
dropretval
iptr_indirect: 0

###
# end of loop bookkeeping
###
COPY
iptr
eol_incr1

{ # Debug code!
	#COPY
	#iptr
	#debug_itr

	#COPY
	#debug_itr:0
	#debug_result

	#OUTPD
	#debug_result:0
}

INCR
eol_incr1:0

COPY
eol_incr1
iptr

INCR
instr_count: 0



GOTO
readloop
endread: endread
OUTPD
33131

##########################################
# End-of-read nonsense
##########################################

COPY
iptr
iptr_indr

COPY
ZERO
iptr_indr: 0

COPY
iptr
eor_incr1

INCR
eor_incr1:0

COPY
eor_incr1
iptr

##########################################
# Interpreter setup
##########################################

COPY
iptr
data_start_address

COPY
data_start_address
dataptr

instr_start_address: instr_start
COPY
instr_start_address
iptr

OUTPD
1141411

##########################################
# Interpreter section
##########################################

#Iterate over possible instructions

instr:0
interpreterloop: 0

{ #Call to testitem which implements the tokenizer
	#EOF = 0 (end)
	# +  = 1 (bf_incr)
	# ,  = 2 (bf_input)
	# -  = 3 (bf_decr)
	# .  = 4 (bf_output)
	# <  = 5 (bf_move_left)
	# >  = 6 (bf_move_right)
	# [  = 7 (bf_loop_left)
	# ]  = 8 (bf_loop_right)

	#Note: these copies need to be executed
	#each iteration because testctrl can overwrite them
	#TODO: try to only run these if dirtied OR inline
	#interpreter code.
	COPY
	endinterpret
	eof

	COPY
	bf_incr
	plus

	COPY
	bf_input
	comma

	COPY
	bf_decr
	minus

	COPY
	bf_output
	dot

	COPY
	bf_move_left
	move_left

	COPY
	bf_move_right
	move_right

	COPY
	bf_loop_start
	loop_start

	COPY
	bf_loop_end
	loop_end

	COPY
	iptr
	item_address

	GOTO
	testitem
}

post_nonloop_instr: post_nonloop_instr

COPY
iptr
incrme

INCR
incrme: 0

COPY
incrme
iptr

GOTO
interpreterloop

##########################################
# BrainFuck Subroutines
##########################################

#EOF = 0 (end)
# +  = 1 (bf_incr)
# ,  = 2 (bf_input)
# -  = 3 (bf_decr)
# .  = 4 (bf_output)
# <  = 5 (bf_move_left)
# >  = 6 (bf_move_right)
# [  = 7 (bf_loop_left)
# ]  = 8 (bf_loop_right)


endinterpret: endinterpret
GOTO
finale

#######
# SETDATA
# *data = *dataptr
# *dataptr_ptr = dataptr
#######
data: 0
setdata: setdata
COPY
dataptr
dataptr_ptr
COPY
dataptr_ptr : 0
data
GOTO
postsetdata: 0


#######
# BF_INCR
#######
bf_incr: bf_incr

#OUTPD
#1111

#Set jump point and call setdata
COPY
bf_incr_rest
postsetdata
GOTO
setdata

#return from setdata
bf_incr_rest:bf_incr_rest

{ #testsign call

	COPY
	data
	testsign_input
	COPY 
	pos_path
	testsign_pos
	COPY #Treat zero as positive
	pos_path 
	testsign_zero
	COPY
	neg_path_careful
	testsign_neg

	GOTO
	testsign
}

pos_path: pos_path
#OUTPD
#11112

COPY
data
bfincr_1
INCR
bfincr_1: 0
COPY
bfincr_1
bfincr_2
INCR
bfincr_2: 0
COPY
bfincr_2
data

{ #**dataptr = *data
	COPY
	dataptr
	dataptr_bfincr_deref

	COPY
	data
	dataptr_bfincr_deref:0
}

GOTO
post_nonloop_instr

neg_path_careful : neg_path_careful
#OUTPD
#11113

#Decr once if we're one, twice otherwise
COPY 
after_decrs
trap

COPY
data
bfdecr_1
DECR
bfdecr_1: 0

COPY
bfdecr_1
data
COPY
bfdecr_1
bfdecr_2

DECR
bfdecr_2: 0
COPY
bfdecr_2
data

after_decrs:after_decrs
{ #**dataptr = *data
	COPY
	dataptr
	dataptr_bfincr_deref2

	COPY
	data
	dataptr_bfincr_deref2:0
}

GOTO
post_nonloop_instr

#######
# BF_DECR
#######

bf_decr: bf_decr

#OUTPD
#3333

COPY
bf_decr_rest
postsetdata
GOTO
setdata
bf_decr_rest:bf_decr_rest

COPY
data
testsign_input
COPY 
neg_path_careful
testsign_pos
COPY 
decr_zero
testsign_zero
COPY
pos_path
testsign_neg

GOTO
testsign

decr_zero: decr_zero
#If we decrement zero, we switch to negative (= odd numbers)
#it will always be 1!

{ #**dataptr = 1
	COPY
	dataptr
	dataptr_bfincr_deref3

	COPY
	ONE
	dataptr_bfincr_deref3:0
}

COPY
ONE
dataptr_ptr
GOTO
post_nonloop_instr


#######
# bf_move_right
#######
bf_move_right: bf_move_right

#OUTPD
#6666

COPY
dataptr
dataptr_mr_local1
INCR
dataptr_mr_local1:0

COPY
dataptr_mr_local1
dataptr_mr_local2
INCR
dataptr_mr_local2:0

COPY
dataptr_mr_local2
dataptr
GOTO
post_nonloop_instr


#######
# bf_move_left
#######
bf_move_left: bf_move_left

#OUTPD
#5555

COPY
dataptr
dataptr_ml_local1
DECR
dataptr_ml_local1:0

COPY
dataptr_ml_local1
dataptr_ml_local2
DECR
dataptr_ml_local2:0

COPY
dataptr_ml_local2
dataptr
GOTO
post_nonloop_instr


#######
# bf_loop_start
#######

bf_loop_start: bf_loop_start
#OUTPD
#7777

{ #setup
	COPY
	zero
	loopcount

	COPY
	iptr_incr
	iptr_fun

	{ #testctrl setup for jumpfwd!
		COPY
		jumpfwd_isstart
		testctrl_start
	
		COPY
		jumpfwd_isend
		testctrl_end
	}
}

COPY
bf_loopstart_rest
postsetdata
GOTO
setdata
bf_loopstart_rest:bf_loopstart_rest

{ #testsign call
#If nonpositive, jumpfwd
#Otherwise no-op!

	COPY
	data
	testsign_input
	COPY 
	post_nonloop_instr
	testsign_pos
	COPY
	jumpfwd 
	testsign_zero
	COPY
	jumpfwd
	testsign_neg

	GOTO
	testsign
}

#no path through here, crash!
OUTPD
9996

{ #increment instruction pointer
	iptr_incr:iptr_incr

	COPY
	iptr
	iptr_incr_jumpfwd

	INCR
	iptr_incr_jumpfwd:0

	COPY
	iptr_incr_jumpfwd
	iptr

	GOTO
	iptr_fun_ret
}

{ #decrement instruction pointer
	iptr_decr:iptr_decr

	COPY
	iptr
	iptr_decr_jumpfwd

	DECR
	iptr_decr_jumpfwd:0

	COPY
	iptr_decr_jumpfwd
	iptr

	GOTO
	iptr_fun_ret
}

{ #Search for ] and go there!
	jumpfwd: jumpfwd

	#scan forward in instruction pointer, incrementing for start loop
	#and decrementing for end loop. Trap on loopcount < 0

	GOTO
	iptr_fun:0
	iptr_fun_ret:0


	{ #testctrl call
		#Some setup happens at the top!

		COPY
		iptr
		item_address

		COPY
		jumpfwd_ignore
		testctrl_nonctrl

		GOTO
		testctrl
	}

	{ #Just increment and ignore this instruction!
		jumpfwd_ignore: jumpfwd_ignore
		GOTO
		jumpfwd
	}

	{
		jumpfwd_isstart: jumpfwd_isstart

		COPY
		loopcount
		loopcount_incr1
		INCR
		loopcount_incr1:0
		COPY
		loopcount_incr1
		loopcount

		GOTO
		jumpfwd
	}

	{
		jumpfwd_isend: jumpfwd_isend
		COPY
		loopcount
		jumpfwd_local_decr
		COPY
		jumpfwd_over
		trap

		DECR
		jumpfwd_local_decr: 0

		COPY
		jumpfwd_local_decr
		loopcount

		GOTO
		jumpfwd
	}

	jumpfwd_over:jumpfwd_over
	#TODO: if no special work is needed on
	#jumpfwd_over, remove label and replace
	#with post_nonloop_instr

	#TODO I may be able to save several
	#copies per interpret for non control
	#ops by resetting jumpfwds here!
	GOTO
	post_nonloop_instr
}

#######
# bf_loop_end
#######
bf_loop_end: bf_loop_end

#OUTPD
#8888

{ #Setup
	COPY
	zero
	loopcount

	COPY
	iptr_decr
	iptr_fun

	{ #testctrl setup for jumpfwd!
		COPY
		jumpfwd_isend
		testctrl_start
	
		COPY
		jumpfwd_isstart
		testctrl_end
	}
}

COPY
bf_loopend_rest
postsetdata
GOTO
setdata
bf_loopend_rest:bf_loopend_rest

{ #testsign call
	#If positive, jumpfwd... backward!
	#Otherwise no-op!
	#Todo: edit jumpfwd to paramterize on [ vs ] incr and decr

	COPY
	data
	testsign_input
	COPY
	jumpfwd 
	testsign_pos
	COPY
	post_nonloop_instr
	testsign_zero
	COPY
	post_nonloop_instr
	testsign_neg

	GOTO
	testsign
}


#######
# bf_input
#######
bf_input: bf_input

INPT
bf_inp_slot: 0

{ #reinterlace data:
	#multiply input by 2!
	#Soo, decr the original value
	#		add two to new value

	bf_inp_result:0



	{ #reinterlace setup
		COPY
		zero
		bf_inp_result

		COPY
		bf_inp_slot
		decr_orig

		COPY
		reinterlace_done
		trap

		COPY
		zero
		new_incr1
	}

	{ #reinterlace loop
		reinterlace_me:0

		DECR
		decr_orig:0

		INCR
		new_incr1:0

		COPY
		new_incr1
		new_incr2

		INCR
		new_incr2:0

		COPY
		new_incr2
		bf_inp_result

		COPY
		new_incr2
		new_incr1

		GOTO
		reinterlace_me
	}

	reinterlace_done:reinterlace_done

}

COPY
dataptr
data_deref_spot

COPY
bf_inp_result
data_deref_spot:0

{ #debug
#	COPY
#	dataptr
#	mmmm

#	COPY
#	mmmm: 0
#	input_deb

#	OUTPD
#	input_deb:0
}

GOTO
post_nonloop_instr

#######
# bf_output
#######
bf_output: bf_output

#OUTPD
#4444

COPY
deinterlace_data
postsetdata

COPY
bf_outp_rest
post_deinterlace

GOTO
setdata
bf_outp_rest:bf_outp_rest

OUTP
deinterlace_output:0

GOTO
post_nonloop_instr

##########################################
# testsign subroutine
##########################################
#args
#testsign_neg
#testsign_pos
#testsign_zero
#testsign_input

testsign: 0
COPY 
testsign_zero: 0
trap

DECR
testsign_input: 0

COPY
testsign_input
testsign_local1

testsign_loop: 0

COPY
testsign_neg: 0
trap
DECR
testsign_local1: 0

COPY
testsign_local1
testsign_local2

COPY
testsign_pos: 0
trap
DECR
testsign_local2: 0

COPY
testsign_local2
testsign_local1

GOTO
testsign_loop

##########################################
# Deinterlace subroutine
##########################################
deinterlace_data:deinterlace_data

#0 => 0
#1,2 => 1
#3,4 => 2
#divide data by two, rounding up

{ #Function Setup
	COPY
	zero
	deinterlace_output

	COPY
	post_deinterlace
	trap
}

{ #pre-loop decrement (if it fails, result is zero)
	COPY
	data
	deinter_decr1
	
	DECR
	deinter_decr1:0
}


{ #deinterlace loop
	deinterlace_loop_start:deinterlace_loop_start

	{ #Increment output
		COPY
		deinterlace_output
		output_incr

		INCR
		output_incr:0

		COPY
		output_incr
		deinterlace_output
	}

	{ #deinter_decr1 -= 2
		COPY
		deinter_decr1
		deinter_decr2
		DECR
		deinter_decr2:0
		COPY
		deinter_decr2
		deinter_decr3
		DECR
		deinter_decr3:0

		COPY
		deinter_decr3
		deinter_decr1
	}

	#Start loop over
	GOTO
	deinterlace_loop_start
}


GOTO
post_deinterlace:post_deinterlace

##########################################
# DROP subroutine
##########################################
# DROP is a hairy beast.
# Basically, this maps buckets of numbers to
# single numbers.
# dropaddr points to the zeroth bucket,
#	loop:
#		dropval -= dropaddr[i] + 1
#	return i+1
# dropretval is used as the return register.
#
# Note that the logic of loop above implies
# that you want each element of dropaddr
# to be one smaller than the bucket it accepts
#
# given dropaddr = [4,3,3,2]
# 0 - 4 => 1
# 5 - 8 => 2
# 9 - 11 => 3
# 12 - 14 => 4
# 15 and up => Depends what's floating around memory!

#setup
dropaddr:0
DROP:DROP

#args
#dropretaddr: 0 (THE RETURN ADDRESS)
#dropval: 0 (THE INPUT/OUTPUT NUMBER)
#droplen: 0 (THE LENGTH OF THE INPUT TABLE)
#dropaddr: 0 (THE ADDRESS OF THE INPUT TABLE)

COPY
ZERO
dropretval

goto
firstdroploop

droploop:droploop

#increment address
COPY
dropaddr
da_incr
INCR
da_incr: 0
COPY
da_incr
dropaddr

firstdroploop:0
#update result value
INCR
dropretval: 0

#Compute the table element.
#We'll decrement the value this number of times.
COPY
dropaddr
dropaddr_indirect
COPY
dropaddr_indirect:0
drop_table_elem

#output table element for debugging

drop_inner_loop:0

#subtract one from the total value.
#On failure, we're done!
COPY
dropfail
trap
DECR
dropval:0

#subtract one from the loop variable
#On failure, repeat the drop loop!
COPY
droploop
trap
DECR
drop_table_elem:0

GOTO
drop_inner_loop

dropfail: dropfail

GOTO
dropretaddr: 0

########
# TESTCTRL
########
{
	testctrl: testctrl

	#Addresses of parameters
	testctrl_start: 0
	testctrl_end: 0
	testctrl_nonctrl: 0

	{ #set up call to testitem
		COPY
		testctrl_nonctrl
		eof
		COPY
		testctrl_nonctrl
		plus
		COPY
		testctrl_nonctrl
		comma
		COPY
		testctrl_nonctrl
		minus
		COPY
		testctrl_nonctrl
		dot
		COPY
		testctrl_nonctrl
		move_left
		COPY
		testctrl_nonctrl
		move_right

		COPY
		testctrl_start
		loop_start

		COPY
		testctrl_end
		loop_end

		GOTO
		testitem
	}

	#Should never get here.
	OUTPD
	9998
}

#######
# TESTITEM
#######
{ #Test which brainfuck symbol (or eof) is at the instruction pointer!

	eof:0
	plus: 0
	comma: 0
	minus: 0
	dot: 0
	move_left: 0
	move_right: 0
	loop_start: 0
	loop_end:0
	#item_address

	testitem:testitem

	#EOF = 0 (end)
	# +  = 1 (bf_incr)
	# ,  = 2 (bf_input)
	# -  = 3 (bf_decr)
	# .  = 4 (bf_output)
	# <  = 5 (bf_move_left)
	# >  = 6 (bf_move_right)
	# [  = 7 (bf_loop_left)
	# ]  = 8 (bf_loop_right)

	#copy current instruction to chkend
	COPY
	item_address:0
	chkend

	{ #debug
#		COPY
#		chkend
#		debug_instr_strt
#		OUTPD
#		debug_instr_strt:0
	}

	#Check for 0
	#(= end of instructions!)
	COPY
	eof
	trap
	DECR
	chkend: 0

	COPY
	plus
	trap
	COPY
	chkend
	chkincr
	DECR
	chkincr: 0

	COPY 
	comma
	trap
	COPY
	chkincr
	chkinpt
	DECR
	chkinpt: 0

	COPY 
	minus
	trap
	COPY
	chkinpt
	chkdecr
	DECR
	chkdecr: 0

	COPY 
	dot
	trap
	COPY
	chkdecr
	chkout
	DECR
	chkout: 0

	COPY 
	move_left
	trap
	COPY
	chkout
	chklmove
	DECR
	chklmove: 0

	COPY 
	move_right
	trap
	COPY
	chklmove
	chkrmove
	DECR
	chkrmove: 0

	COPY 
	loop_start
	trap
	COPY
	chkrmove
	chklloop
	DECR
	chklloop: 0

	COPY 
	loop_end
	trap
	COPY
	chklloop
	chkrloop
	DECR
	chkrloop: 0

	OUTPD
	9999

	#TODO: should never reach here.
	#Crash?
}


finale: finale
##########################################
# Global Data
##########################################


###
# Constants
###
ZERO: 0
ONE: 1
STARTLOOP: 7
ENDLOOP: 8

###
# Global scalars
###
dataptr: 0
iptr: instr_start
loopcount: 0 # natural number
data_start_address: 0

###
# Global vectors
###
# vector format:
# We store 2 different vectors
# Treating 9100 as address 0:
#  addr % 2 == 0 -> nonnegative data address (integer)
#  addr % 2 == 1 -> instructions (ascii code)


9099: 0
instr_start: 0



